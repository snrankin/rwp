# This is a basic workflow to help you get started with Actions

name: New Version Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ['main']

env:
  FTP_HOST: ${{ secrets.FTP_HOST }}
  FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
  FTP_ PATH: ${{ secrets.FTP_PATH }}
  FTP USERNAME: ${{ secrets.FTP_USERNAME }}
  CI: true
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_run:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - run: echo "${{ github.event.head_commit.message }}"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: check_run

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.4.1
        with:
          # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions.
          node-version-file: .nvmrc
          # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
          cache: 'yarn'
          # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
          cache-dependency-path: yarn.lock
      - run: yarn install --frozen-lockfile --production
      - run: chmod +x ./build/scripts/*.js
        shell: bash
      - run: yarn npm link
      - name: Release
        id: semantic
        uses: ahmadnassri/action-semantic-release@v2
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          debug: true
      - run: echo "$OUTPUTS"
        env:
          OUTPUTS: ${{ steps.semantic.outputs.published }}
      - name: FTP/SFTP file deployer
        # You may pin to the exact commit or the version.
        # uses: milanmk/actions-file-deployer@58030c10c50a8577d08cef33e47c23bcbbf78c33
        uses: milanmk/actions-file-deployer@1.11
        if: steps.semantic.outputs.published == 'true'
        with:
          # Remote file transfer protocol (ftp, sftp)
          remote-protocol: ftp
          # Remote host
          remote-host: ${{ secrets.FTP_HOST }}
          # Remote port
          remote-port: 21
          # File synchronization (delta, full)
          sync: full
          # FTP/SSH username
          remote-user: ${{ secrets.FTP_USERNAME }}
          # FTP/SSH password
          remote-password: ${{ secrets.FTP_PASSWORD }}
          # Upload logs to artifacts
          artifacts: true
          local-path: ./release/rwp.zip
