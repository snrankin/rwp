<?php

// scoper-autoload.php @generated by PhpScoper

$loader = require_once __DIR__ . '/autoload.php';

// Aliases for the whitelisted classes. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#class-whitelisting
if (!class_exists('Page_For_Post_Type', false) && !interface_exists('Page_For_Post_Type', false) && !trait_exists('Page_For_Post_Type', false)) {
	spl_autoload_call('RWP\Vendor\Page_For_Post_Type');
}
if (!class_exists('PAnD', false) && !interface_exists('PAnD', false) && !trait_exists('PAnD', false)) {
	spl_autoload_call('RWP\Vendor\PAnD');
}

if (!class_exists('safe_svg_attributes', false) && !interface_exists('safe_svg_attributes', false) && !trait_exists('safe_svg_attributes', false)) {
    spl_autoload_call('RWP\Vendor\safe_svg_attributes');
}
if (!class_exists('safe_svg_tags', false) && !interface_exists('safe_svg_tags', false) && !trait_exists('safe_svg_tags', false)) {
    spl_autoload_call('RWP\Vendor\safe_svg_tags');
}
if (!class_exists('safe_svg', false) && !interface_exists('safe_svg', false) && !trait_exists('safe_svg', false)) {
    spl_autoload_call('RWP\Vendor\safe_svg');
}
if (!class_exists('Extended_Taxonomy_Admin', false) && !interface_exists('Extended_Taxonomy_Admin', false) && !trait_exists('Extended_Taxonomy_Admin', false)) {
	spl_autoload_call('RWP\Vendor\Extended_Taxonomy_Admin');
}
if (!class_exists('Walker_ExtendedTaxonomyRadios', false) && !interface_exists('Walker_ExtendedTaxonomyRadios', false) && !trait_exists('Walker_ExtendedTaxonomyRadios', false)) {
	spl_autoload_call('RWP\Vendor\Walker_ExtendedTaxonomyRadios');
}
if (!class_exists('Extended_CPT_Admin', false) && !interface_exists('Extended_CPT_Admin', false) && !trait_exists('Extended_CPT_Admin', false)) {
	spl_autoload_call('RWP\Vendor\Extended_CPT_Admin');
}
if (!class_exists('Extended_CPT_Rewrite_Testing', false) && !interface_exists('Extended_CPT_Rewrite_Testing', false) && !trait_exists('Extended_CPT_Rewrite_Testing', false)) {
	spl_autoload_call('RWP\Vendor\Extended_CPT_Rewrite_Testing');
}
if (!class_exists('Extended_Taxonomy_Rewrite_Testing', false) && !interface_exists('Extended_Taxonomy_Rewrite_Testing', false) && !trait_exists('Extended_Taxonomy_Rewrite_Testing', false)) {
	spl_autoload_call('RWP\Vendor\Extended_Taxonomy_Rewrite_Testing');
}
if (!class_exists('Walker_ExtendedTaxonomyDropdown', false) && !interface_exists('Walker_ExtendedTaxonomyDropdown', false) && !trait_exists('Walker_ExtendedTaxonomyDropdown', false)) {
	spl_autoload_call('RWP\Vendor\Walker_ExtendedTaxonomyDropdown');
}
if (!class_exists('Walker_ExtendedTaxonomyCheckboxes', false) && !interface_exists('Walker_ExtendedTaxonomyCheckboxes', false) && !trait_exists('Walker_ExtendedTaxonomyCheckboxes', false)) {
	spl_autoload_call('RWP\Vendor\Walker_ExtendedTaxonomyCheckboxes');
}
if (!class_exists('Extended_CPT', false) && !interface_exists('Extended_CPT', false) && !trait_exists('Extended_CPT', false)) {
	spl_autoload_call('RWP\Vendor\Extended_CPT');
}
if (!class_exists('Extended_Taxonomy', false) && !interface_exists('Extended_Taxonomy', false) && !trait_exists('Extended_Taxonomy', false)) {
	spl_autoload_call('RWP\Vendor\Extended_Taxonomy');
}
if (!class_exists('Extended_Rewrite_Testing', false) && !interface_exists('Extended_Rewrite_Testing', false) && !trait_exists('Extended_Rewrite_Testing', false)) {
	spl_autoload_call('RWP\Vendor\Extended_Rewrite_Testing');
}

if (!class_exists('JsonException', false) && !interface_exists('JsonException', false) && !trait_exists('JsonException', false)) {
	spl_autoload_call('RWP\Vendor\JsonException');
}
if (!class_exists('ValueError', false) && !interface_exists('ValueError', false) && !trait_exists('ValueError', false)) {
	spl_autoload_call('RWP\Vendor\ValueError');
}
if (!class_exists('Attribute', false) && !interface_exists('Attribute', false) && !trait_exists('Attribute', false)) {
	spl_autoload_call('RWP\Vendor\Attribute');
}
if (!class_exists('UnhandledMatchError', false) && !interface_exists('UnhandledMatchError', false) && !trait_exists('UnhandledMatchError', false)) {
	spl_autoload_call('RWP\Vendor\UnhandledMatchError');
}
if (!class_exists('Stringable', false) && !interface_exists('Stringable', false) && !trait_exists('Stringable', false)) {
	spl_autoload_call('RWP\Vendor\Stringable');
}

// Functions whitelisting. For more information see:
// https://github.com/humbug/php-scoper/blob/master/README.md#functions-whitelisting
if (!function_exists('stripslashes_deep')) {
	function stripslashes_deep() {
		return \RWP\Vendor\stripslashes_deep(...func_get_args());
	}
}
if (!function_exists('get_page_for_post_type')) {
	function get_page_for_post_type() {
		return \RWP\Vendor\get_page_for_post_type(...func_get_args());
	}
}
if (!function_exists('wp_cache_remember')) {
	function wp_cache_remember() {
		return \RWP\Vendor\wp_cache_remember(...func_get_args());
	}
}


if (!function_exists('wp_cache_forget')) {
	function wp_cache_forget() {
		return \RWP\Vendor\wp_cache_forget(...func_get_args());
	}
}

if (!function_exists('remember_transient')) {
	function remember_transient() {
		return \RWP\Vendor\remember_transient(...func_get_args());
	}
}

if (!function_exists('forget_transient')) {
	function forget_transient() {
		return \RWP\Vendor\forget_transient(...func_get_args());
	}
}

if (!function_exists('remember_site_transient')) {
	function remember_site_transient() {
		return \RWP\Vendor\remember_site_transient(...func_get_args());
	}
}

if (!function_exists('forget_site_transient')) {
	function forget_site_transient() {
		return \RWP\Vendor\forget_site_transient(...func_get_args());
	}
}

if (!function_exists('sysexit')) {
	function sysexit() {
		return \RWP\Vendor\sysexit(...func_get_args());
	}
}

if (!function_exists('register_extended_post_type')) {
	function register_extended_post_type() {
		return \RWP\Vendor\register_extended_post_type(...func_get_args());
	}
}
if (!function_exists('register_extended_taxonomy')) {
	function register_extended_taxonomy() {
		return \RWP\Vendor\register_extended_taxonomy(...func_get_args());
	}
}

if (!function_exists('findTranslationFiles')) {
	function findTranslationFiles() {
		return \RWP\Vendor\findTranslationFiles(...func_get_args());
	}
}
if (!function_exists('calculateTranslationStatus')) {
	function calculateTranslationStatus() {
		return \RWP\Vendor\calculateTranslationStatus(...func_get_args());
	}
}
if (!function_exists('printTranslationStatus')) {
	function printTranslationStatus() {
		return \RWP\Vendor\printTranslationStatus(...func_get_args());
	}
}
if (!function_exists('extractLocaleFromFilePath')) {
	function extractLocaleFromFilePath() {
		return \RWP\Vendor\extractLocaleFromFilePath(...func_get_args());
	}
}
if (!function_exists('extractTranslationKeys')) {
	function extractTranslationKeys() {
		return \RWP\Vendor\extractTranslationKeys(...func_get_args());
    }
}
if (!function_exists('findTransUnitMismatches')) {
    function findTransUnitMismatches() {
        return \RWP\Vendor\findTransUnitMismatches(...func_get_args());
	}
}
if (!function_exists('printTitle')) {
	function printTitle() {
		return \RWP\Vendor\printTitle(...func_get_args());
	}
}
if (!function_exists('printTable')) {
	function printTable() {
		return \RWP\Vendor\printTable(...func_get_args());
	}
}
if (!function_exists('textColorRed')) {
	function textColorRed() {
		return \RWP\Vendor\textColorRed(...func_get_args());
	}
}
if (!function_exists('textColorGreen')) {
	function textColorGreen() {
		return \RWP\Vendor\textColorGreen(...func_get_args());
	}
}
if (!function_exists('textColorNormal')) {
	function textColorNormal() {
		return \RWP\Vendor\textColorNormal(...func_get_args());
	}
}
if (!function_exists('dump')) {
	function dump() {
		return \RWP\Vendor\dump(...func_get_args());
	}
}
if (!function_exists('dd')) {
	function dd() {
		return \RWP\Vendor\dd(...func_get_args());
	}
}
if (!function_exists('trigger_deprecation')) {
	function trigger_deprecation() {
		return \RWP\Vendor\trigger_deprecation(...func_get_args());
	}
}
if (!function_exists('append_config')) {
	function append_config() {
		return \RWP\Vendor\append_config(...func_get_args());
	}
}
if (!function_exists('blank')) {
	function blank() {
		return \RWP\Vendor\blank(...func_get_args());
	}
}
if (!function_exists('class_basename')) {
	function class_basename() {
		return \RWP\Vendor\class_basename(...func_get_args());
	}
}
if (!function_exists('class_uses_recursive')) {
	function class_uses_recursive() {
		return \RWP\Vendor\class_uses_recursive(...func_get_args());
	}
}
if (!function_exists('trait_uses_recursive')) {
	function trait_uses_recursive() {
		return \RWP\Vendor\trait_uses_recursive(...func_get_args());
	}
}
if (!function_exists('e')) {
	function e() {
		return \RWP\Vendor\e(...func_get_args());
	}
}
if (!function_exists('env')) {
	function env() {
		return \RWP\Vendor\env(...func_get_args());
	}
}
if (!function_exists('filled')) {
	function filled() {
		return \RWP\Vendor\filled(...func_get_args());
	}
}
if (!function_exists('object_get')) {
	function object_get() {
		return \RWP\Vendor\object_get(...func_get_args());
	}
}
if (!function_exists('value')) {
	function value() {
		return \RWP\Vendor\value(...func_get_args());
	}
}
if (!function_exists('optional')) {
	function optional() {
		return \RWP\Vendor\optional(...func_get_args());
	}
}
if (!function_exists('preg_replace_array')) {
	function preg_replace_array() {
		return \RWP\Vendor\preg_replace_array(...func_get_args());
	}
}
if (!function_exists('retry')) {
	function retry() {
		return \RWP\Vendor\retry(...func_get_args());
	}
}
if (!function_exists('tap')) {
	function tap() {
		return \RWP\Vendor\tap(...func_get_args());
	}
}
if (!function_exists('throw_if')) {
	function throw_if() {
		return \RWP\Vendor\throw_if(...func_get_args());
	}
}
if (!function_exists('throw_unless')) {
	function throw_unless() {
		return \RWP\Vendor\throw_unless(...func_get_args());
	}
}
if (!function_exists('transform')) {
	function transform() {
		return \RWP\Vendor\transform(...func_get_args());
	}
}
if (!function_exists('windows_os')) {
	function windows_os() {
		return \RWP\Vendor\windows_os(...func_get_args());
	}
}
if (!function_exists('with')) {
	function with() {
		return \RWP\Vendor\with(...func_get_args());
	}
}
if (!function_exists('collect')) {
	function collect() {
		return \RWP\Vendor\collect(...func_get_args());
	}
}
if (!function_exists('data_fill')) {
	function data_fill() {
		return \RWP\Vendor\data_fill(...func_get_args());
	}
}
if (!function_exists('data_set')) {
	function data_set() {
		return \RWP\Vendor\data_set(...func_get_args());
	}
}
if (!function_exists('data_get')) {
	function data_get() {
		return \RWP\Vendor\data_get(...func_get_args());
	}
}
if (!function_exists('head')) {
	function head() {
		return \RWP\Vendor\head(...func_get_args());
	}
}
if (!function_exists('last')) {
	function last() {
        return \RWP\Vendor\last(...func_get_args());
    }
}
if (!function_exists('h')) {
    function h() {
        return \RWP\Vendor\h(...func_get_args());
    }
}
if (!function_exists('getExceptionMsg')) {
    function getExceptionMsg() {
        return \RWP\Vendor\getExceptionMsg(...func_get_args());
    }
}
if (!function_exists('sendPage')) {
    function sendPage() {
        return \RWP\Vendor\sendPage(...func_get_args());
	}
}


/**
 * Additional data helper functions
 * @link https://gist.github.com/derekmd/34da3c9861c14a7ebe4dc78582e20a35
 */

if (!function_exists('data_dot')) {
    /**
     * Flatten a multi-dimensional object with dots.
     *
     * @param  array|ArrayAccess|object $object
     * @param  string $prepend
     *
     * @return array
     */
    function data_dot($object, $prepend = '')
    {
        $results = [];

        if (\RWP\Vendor\Illuminate\Support\Arr::accessible($object)) {
            $array = $object;
        } elseif (is_object($object)) {
            $array = get_object_vars($object);
        } else {
            $array = [];
        }

        foreach ($array as $key => $value) {
            if (is_array($value) && !empty($value)) {
                $results = array_merge($results, data_dot($value, $prepend . $key . '.'));
            } elseif ($value instanceof \RWP\Vendor\Illuminate\Support\Collection) {
                $results = array_merge($results, data_dot($value->all(), $prepend . $key . '.'));
            } elseif (is_object($value) && !empty($props = get_object_vars($value))) {
                $results = array_merge($results, data_dot($props, $prepend . $key . '.'));
            } else {
                $results[$prepend . $key] = $value;
            }
        }

        return $results;
    }
}

if (!function_exists('data_has')) {
    /**
     * Find if there is an item in an array or object using "dot" notation.
     *
     * @param  mixed   $target
     * @param  string|array  $keys
     *
     * @return bool
     */
    function data_has($target, $keys)
    {
        if (is_null($keys)) {
            return false;
        }

        $keys = (array) $keys;

        if (!$target) {
            return false;
        }

        if ($keys === []) {
            return false;
        }

        foreach ($keys as $i => $key) {
            $subKeyTarget = $target;

            if (\RWP\Vendor\Illuminate\Support\Arr::accessible($subKeyTarget) && \RWP\Vendor\Illuminate\Support\Arr::exists($subKeyTarget, $key)) {
                continue;
            }

            if (is_object($subKeyTarget) && \RWP\Vendor\Illuminate\Support\Arr::exists(get_object_vars($subKeyTarget), $key)) {
                continue;
            }

            foreach (explode('.', $key) as $segment) {
                if ($segment === '*') {
                    if ($subKeyTarget instanceof \RWP\Vendor\Illuminate\Support\Collection) {
                        $subKeyTarget = $subKeyTarget->all();
                    } elseif (!is_array($subKeyTarget)) {
                        return false;
                    }

                    if (empty($key)) {
                        return true;
                    }

                    return array_reduce($subKeyTarget, function ($present, $item) use ($keys, $i) {
                        return $present || data_has($item, array_slice($keys, $i + 1));
                    }, false);
                }

                if (\RWP\Vendor\Illuminate\Support\Arr::accessible($subKeyTarget) && \RWP\Vendor\Illuminate\Support\Arr::exists($subKeyTarget, $segment)) {
                    $subKeyTarget = $subKeyTarget[$segment];
                } elseif (is_object($subKeyTarget) && isset($subKeyTarget->{$segment})) {
                    $subKeyTarget = $subKeyTarget->{$segment};
                } else {
                    return false;
                }
            }
        }

        return true;
    }
}

if (!\function_exists('data_remove')) {
    /**
     * Set an item on an array or object using dot notation.
     *
     * @param  mixed  $target
     * @param  string|array  $key
     * @return mixed
     */
    function data_remove(&$target, $key)
    {
        $segments = \is_array($key) ? $key : \explode('.', $key);
        if (($segment = \array_shift($segments)) === '*') {
            if (!\RWP\Vendor\Illuminate\Support\Arr::accessible($target)) {
                return $target;
            }
            if ($segments) {
                foreach ($target as &$inner) {
                    data_remove($inner, $segments);
                }
            }  else {
				unset($target[$segment]);
			}
        } elseif (\RWP\Vendor\Illuminate\Support\Arr::accessible($target)) {
            if ($segments) {
                if (!\RWP\Vendor\Illuminate\Support\Arr::exists($target, $segment)) {
                    return $target;
                }
                data_remove($target[$segment], $segments);
            }  else {
				unset($target[$segment]);
			}
        } elseif (\is_object($target)) {
            if ($segments) {
                if (!isset($target->{$segment})) {
                    return $target;
                }
                data_remove($target->{$segment}, $segments);
            } else {
				unset($target->{$segment});
			}
        } else {
            return $target;
        }
    }
}

return $loader;
