/// ======================================================================== ///
/// @name   _grid
///
/// @group  RWP
/// @since  1.0.1
/// @author RIESTER <wordpress@riester.com>
/// ======================================================================== ///

.has-bg {
	position: relative;
	overflow: hidden;

	> .bg-wrapper {
		@include cover-absolute;

		z-index: -1;
	}
}

.page-section {
	--section-y-gutter: var(--#{$variable-prefix}section-gutter-y);

	@media only screen {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}

	&:not(:first-child) {
		margin-top: var(--section-y-gutter);
	}

	&.has-bg {
		padding-top: var(--section-y-gutter);
		padding-bottom: var(--section-y-gutter);
	}
	@supports (padding: unquote('max(0px)')) {
		// stylelint-disable-next-line
		@media only screen and (min-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {
			padding-left: unquote('max(--#{$variable-prefix}gutter-x, env(safe-area-inset-left))');
			padding-right: unquote('max(--#{$variable-prefix}gutter-x, env(safe-area-inset-right))');
		}
	}
}

.screen-full {
	width: 100%;
	height: 100vh;
	@media only print {
		height: 100%;
	}
}

.stretched-col {
	&.left {
		> .content-wrapper {
			@include stretch-col-content(left, $grid-gutter-width, false);
		}
	}

	&.right {
		> .content-wrapper {
			@include stretch-col-content(right, $grid-gutter-width, false);
		}
	}
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
	// Single container class with breakpoint max-widths
	.container,
  	// 100% wide container at all breakpoints
  	.container-fluid {
		@include make-container;
	}

	// Responsive containers that are 100% wide until a breakpoint
	@each $breakpoint in map-keys($grid-breakpoints) {
		$infix: breakpoint-infix($breakpoint);

		.container-#{$breakpoint} {
			@extend .container-fluid;
		}

		@include media-breakpoint-up($breakpoint) {
			%responsive-container-#{$breakpoint} {
				max-width: var(--#{$variable-prefix}container#{$infix}-width);
			}

			// Extend each breakpoint which is smaller or equal to the current breakpoint
			$extend-breakpoint: true;

			@each $name, $width in $grid-breakpoints {
				@if $extend-breakpoint {
					.container#{$infix} {
						@extend %responsive-container-#{$breakpoint};
					}

					// Once the current breakpoint is reached, stop extending
					@if $breakpoint == $name {
						$extend-breakpoint: false;
					}
				}
			}
		}
	}
}

// Row
//
// Rows contain your columns.

@if $enable-grid-classes {
	.row {
		@include make-row;

		> * {
			@include make-col-ready;
		}
	}
}

@if $enable-cssgrid {
	.grid {
		display: grid;
		grid-template-rows: repeat(var(--#{$variable-prefix}rows, 1), 1fr);
		grid-template-columns: repeat(var(--#{$variable-prefix}columns, #{$grid-columns}), 1fr);
		gap: var(--#{$variable-prefix}gap, #{$grid-gutter-width});

		@include make-cssgrid;
	}
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
	@include make-grid-columns;
}

.content-wrapper {
	flex: 1 1 auto;
}
