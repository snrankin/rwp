/// ======================================================================== ///
/// @name   debug
///
/// @group  RWP
/// @since  1.0.1
/// @author RIESTER <wordpress@riester.com>
/// ======================================================================== ///
@import '../global/index';

$debug-themes: (
	dark: (
		main: (
			background: #18171b,
			color: #ff8400,
		),
		highlight: (
			background: rgba(111, 172, 204, 0.3),
			border: 1px solid #7da0b1,
		),
		highlight-active: (
			background: rgba(253, 175, 0, 0.4),
			border: 1px solid #ffa500,
		),
		search-wrapper: (
			background: #fff,
			color: #757575,
			border: 1px solid #bbb,
		),
		search-input: (
			color: #000,
		),
		search-next: (
			background: #f2f2f2,
		),
		search-prev: (
			background: #f2f2f2,
		),
		num: (
			color: #1299da,
		),
		str: (
			color: #56db3a,
		),
		note: (
			color: #1299da,
		),
		ref: (
			color: #a0a0a0,
		),
		public: (
			color: #fff,
		),
		protected: (
			color: #fff,
		),
		private: (
			color: #fff,
		),
		meta: (
			color: #b729d9,
		),
		key: (
			color: #56db3a,
		),
		index: (
			color: #1299da,
		),
		ellipsis: (
			color: #ff8400,
		),
		ellipsis-note: (
			color: #6897bb,
		),
	),
	light: (
		main: (
			background: #fff,
			color: #cc7832,
		),
		highlight: (
			background: rgba(111, 172, 204, 0.3),
			border: 1px solid #7da0b1,
		),
		highlight-active: (
			background: rgba(253, 175, 0, 0.4),
			border: 1px solid #ffa500,
		),
		search-wrapper: (
			background: #fff,
			color: #757575,
			border: 1px solid #bbb,
		),
		search-input: (
			color: #000,
		),
		search-next: (
			background: #f2f2f2,
		),
		search-prev: (
			background: #f2f2f2,
		),
		num: (
			color: #1299da,
		),
		str: (
			color: #629755,
		),
		note: (
			color: #6897bb,
		),
		ref: (
			color: #6e6e6e,
		),
		public: (
			color: #262626,
		),
		protected: (
			color: #262626,
		),
		private: (
			color: #262626,
		),
		meta: (
			color: #b729d9,
		),
		key: (
			color: #789339,
		),
		index: (
			color: #1299da,
		),
		ellipsis: (
			color: #cc7832,
		),
		ellipsis-note: (
			color: #6897bb,
		),
	),
);

@mixin debug-theme($theme: dark) {
	$theme-vars: map-get($debug-themes, $theme);
	$main: map-get($theme-vars, main);
	@each $prop, $val in $main {
		@debug '#{prop}';
		@debug '#{val}';

		#{$prop}: $val;
	}

	.sf-dump-highlight {
		.sf-dump-public,
		.sf-dump-protected,
		.sf-dump-private,
		.sf-dump-str,
		.sf-dump-key {
			$highlight: map-get($theme-vars, highlight);
			@each $prop, $val in $highlight {
				#{$prop}: $val;
			}
		}
	}

	.sf-dump-highlight-active {
		.sf-dump-public,
		.sf-dump-protected,
		.sf-dump-private,
		.sf-dump-str,
		.sf-dump-key {
			$highlight-active: map-get($theme-vars, highlight-active);
			@each $prop, $val in $highlight-active {
				#{$prop}: $val;
			}
		}
	}

	.sf-dump-search-wrapper {
		> * {
			$search-wrapper: map-get($theme-vars, search-wrapper);
			@each $prop, $val in $search-wrapper {
				#{$prop}: $val;
			}
		}

		> input.sf-dump-search-input {
			$search-input: map-get($theme-vars, search-input);
			@each $prop, $val in $search-input {
				#{$prop}: $val;
			}
		}
	}

	.sf-dump-num {
		$num: map-get($theme-vars, num);
		@each $prop, $val in $num {
			#{$prop}: $val;
		}
	}

	.sf-dump-str {
		$str: map-get($theme-vars, str);
		@each $prop, $val in $str {
			#{$prop}: $val;
		}
	}

	.sf-dump-note {
		$note: map-get($theme-vars, note);
		@each $prop, $val in $note {
			#{$prop}: $val;
		}
	}

	.sf-dump-ref {
		$ref: map-get($theme-vars, ref);
		@each $prop, $val in $ref {
			#{$prop}: $val;
		}
	}

	.sf-dump-public {
		$public: map-get($theme-vars, public);
		@each $prop, $val in $public {
			#{$prop}: $val;
		}
	}

	.sf-dump-protected {
		$protected: map-get($theme-vars, protected);
		@each $prop, $val in $protected {
			#{$prop}: $val;
		}
	}

	.sf-dump-private {
		$private: map-get($theme-vars, private);
		@each $prop, $val in $private {
			#{$prop}: $val;
		}
	}

	.sf-dump-meta {
		$meta: map-get($theme-vars, meta);
		@each $prop, $val in $meta {
			#{$prop}: $val;
		}
	}

	.sf-dump-key {
		$key: map-get($theme-vars, key);
		@each $prop, $val in $key {
			#{$prop}: $val;
		}
	}

	.sf-dump-index {
		$index: map-get($theme-vars, index);
		@each $prop, $val in $index {
			#{$prop}: $val;
		}
	}

	.sf-dump-ellipsis {
		$ellipsis: map-get($theme-vars, ellipsis);
		@each $prop, $val in $ellipsis {
			#{$prop}: $val;
		}
	}

	.sf-dump-ellipsis-note {
		$ellipsis-note: map-get($theme-vars, ellipsis-note);
		@each $prop, $val in $ellipsis-note {
			#{$prop}: $val;
		}
	}

	.sf-dump-ns {
		user-select: none;
	}
}

#query-monitor-main {
	&.qm-theme-rwp {
		&[data-theme='light'] {
			pre {
				&.sf-dump {
					@include debug-theme(light);
				}
			}
		}

		&[data-theme='dark'] {
			pre {
				&.sf-dump {
					@include debug-theme(dark);
				}
			}
		}

		.qm-boxed {
			max-width: 100% !important;
		}

		pre {
			@include font-size($code-font-size !important);

			font-family: $font-family-code !important;
			line-height: line-height(1.2) !important;
			color: $pre-color !important;

			code {
				@include font-size(inherit !important);

				line-height: line-height(1.2) !important;
				font-family: $font-family-code !important;
				color: inherit !important;
				word-break: normal !important;
			}
		}

		code {
			@include font-size($code-font-size !important);

			line-height: line-height(1.2) !important;
			font-family: $font-family-code !important;
			word-wrap: break-word !important;

			// Streamline the style when inside anchors to avoid broken underline and more
			a > & {
				color: inherit !important;
			}
		}
	}
}

pre.sf-dump {
	@include font-size($code-font-size !important);

	font-family: $font-family-code !important;
	line-height: line-height(1.2) !important;
	overflow: hidden;
	padding: 5px;
	position: relative;
	white-space: pre-wrap;
	word-break: break-all;
	word-wrap: break-word;
	display: block;

	&[data-theme='light'] {
		@include debug-theme(light);
	}

	&[data-theme='dark'] {
		@include debug-theme(dark);
	}

	&::after {
		content: '';
		visibility: hidden;
		display: block;
		height: 0;
		clear: both;
	}

	.sf-dump-compact,
	.sf-dump-str-collapse .sf-dump-str-collapse,
	.sf-dump-str-expand .sf-dump-str-expand {
		display: none;
	}

	span {
		display: inline;
	}

	a {
		text-decoration: none;
		cursor: pointer;
		border: 0;
		outline: none;
		color: inherit;
	}

	img {
		max-width: 50em;
		max-height: 50em;
		margin: 0.5em 0 0;
		padding: 0;
	}

	.sf-dump-ellipsis {
		display: inline-block;
		text-overflow: ellipsis;
		max-width: 5em;
		white-space: nowrap;
		overflow: hidden;
		vertical-align: top;

		+ .sf-dump-ellipsis {
			max-width: none;
		}
	}

	code {
		display: inline;
		padding: 0;
		background: none;
	}

	.sf-dump-highlight,
	.sf-dump-highlight-active {
		.sf-dump-public,
		.sf-dump-protected,
		.sf-dump-private,
		.sf-dump-str,
		.sf-dump-key {
			border-radius: 3px;
		}
	}

	.sf-dump-search-hidden {
		display: none !important;
	}

	.sf-dump-search-wrapper {
		font-size: 0;
		white-space: nowrap;
		margin-bottom: 5px;
		display: flex;
		position: sticky;
		top: 5px;

		> * {
			vertical-align: top;
			box-sizing: border-box;
			height: 21px;
			font-weight: normal;
			border-radius: 0;
		}

		> input.sf-dump-search-input {
			@include border-start-radius(3px);

			padding: 3px;
			height: 21px;
			font-size: 12px;
			border-right: none;
			min-width: 15px;
			width: 100%;
		}

		> .sf-dump-search-input-next,
		> .sf-dump-search-input-previous {
			background: #f2f2f2;
			outline: none;
			border-left: none;
			font-size: 0;
			line-height: 0;

			> svg {
				pointer-events: none;
				width: 12px;
				height: 12px;
			}
		}

		> .sf-dump-search-input-next {
			@include border-end-radius(3px);
		}

		> .sf-dump-search-count {
			display: inline-block;
			padding: 0 5px;
			margin: 0;
			border-left: none;
			line-height: 21px;
			font-size: 12px;
		}
	}

	.sf-dump-const,
	.sf-dump-str,
	.sf-dump-num {
		font-weight: bold;
	}
}
