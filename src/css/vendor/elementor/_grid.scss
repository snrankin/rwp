/// ======================================================================== ///
/// @name   _grid
///
/// @group  RIESTER
/// @since  1.0.0
/// @author RIESTER <wordpress@riester.com>
/// ======================================================================== ///

@mixin make-elementor-col-ready() {
	// Add box sizing if only the grid is loaded
	box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we set the width
	// later on to override this initial width.
	width: 100%;
	//margin-top: getcssvar(gutter-y);
	// padding-right: calc(#{getcssvar(gutter-x)} * 0.5); // stylelint-disable-line function-disallowed-list
	// padding-left: calc(#{getcssvar(gutter-x)} * 0.5); // stylelint-disable-line function-disallowed-list
	> .elementor-column-wrap.elementor-element-populated {
		padding-top: unset;
		padding-bottom: unset;

		> .elementor-widget-wrap {
			--flex-direction: column;

			display: flex;
			justify-content: var(--justify-content);
			flex-direction: var(--flex-direction);
			align-items: var(--align-items);
			align-content: var(--align-content);
			flex-wrap: var(--flex-wrap); // stylelint-disable-line
			gap: var(--gap-y) var(--gap-x);
		}
	}
}

@mixin make-elementor-columns($columns: $grid-columns, $gutter: $grid-gutter-width) {
	@each $breakpoint, $device in $elementor-breakpoints {
		$infix: breakpoint-infix($breakpoint);
		$class: '';

		@if $device != desktop {
			$class: '-#{$device}';
		}

		@include media-breakpoint-up($breakpoint) {
			// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			// .col#{$infix} {
			// 	flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
			// }

			.row-cols#{$class}-auto > * {
				@include make-col-auto;
			}

			@if $grid-row-columns > 0 {
				@for $i from 1 through $grid-row-columns {
					.row-cols#{$class}-#{$i} {
						@include row-cols($i);
					}
				}
			}

			&.e-col#{$class}-auto {
				@include make-col-auto;
			}

			@if $columns > 0 {
				@for $i from 1 through $columns {
					&.e-col#{$class}-#{$i} {
						flex: 0 1 auto;
						width: calc(percentage(divide($i, $columns)) - var(--gap-x));
					}
				}

				// `$columns - 1` because offsetting by the width of an entire row isn't possible
				@for $i from 0 through ($columns - 1) {
					@if not($i == 0) {
						// Avoid emitting useless .offset-0
						&.offset#{$class}-#{$i},
						&.offset-l#{$class}-#{$i} {
							@include make-col-offset($i, left, false, $columns);
						}
						&.offset-r#{$class}-#{$i} {
							@include make-col-offset($i, right, false, $columns);
						}
						&.offset-nl#{$class}-#{$i} {
							@include make-col-offset($i, left, true, $columns);
						}
						&.offset-nr#{$class}-#{$i} {
							@include make-col-offset($i, right, true, $columns);
						}
					}
				}
			}
		}
	}
}

// :root {
// 	@include setcssvar(gutter-x, getcssvar(gx-default, getcssvar(gutter-x), 'e-'));
// 	@include setcssvar(gutter-y, getcssvar(gy-default, getcssvar(gutter-y), 'e-'));
// }

.elementor-container {
	width: 100%;
	margin-right: auto;
	margin-left: auto;
}

.rwp-elementor {
	.elementor-section.elementor-section-boxed > .elementor-container {
		@each $breakpoint in map-keys($grid-breakpoints) {
			$infix: breakpoint-infix($breakpoint);

			@include media-breakpoint-up($breakpoint) {
				max-width: getcssvar(container#{$infix}-width);
			}
		}
	}

	.e-container {
		@each $breakpoint in map-keys($grid-breakpoints) {
			$infix: breakpoint-infix($breakpoint);

			@include media-breakpoint-up($breakpoint) {
				--container-max-width: #{getcssvar(container#{$infix}-width)};
			}
		}
	}

	.elementor-widget:not(:last-child) {
		margin-bottom: 0;
	}

	.e-container--column {
		&.stretched-col {
			&.left {
				@include stretch-col-content(left, false);
			}

			&.right {
				@include stretch-col-content(right, false);
			}
		}
	}
}

.elementor-section:not(.elementor-sticky__spacer) {
	position: relative;

	@media only screen {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}

	&.elementor-reverse-mobile {
		> .elementor-container {
			> .elementor-row {
				> :nth-child(1) {
					order: initial;
				}

				> :nth-child(2) {
					order: -1;
					@include media-breakpoint-up(md) {
						order: initial;
					}
				}
			}
		}
	}
	@each $breakpoint in map-keys($grid-breakpoints) {
		$infix: breakpoint-infix($breakpoint);

		@for $i from 1 through $grid-row-columns {
			@include media-breakpoint-up($breakpoint) {
				&.row-cols#{$infix}-#{$i} {
					> .elementor-container {
						width: 100%;
						flex: 0 1 auto;

						> .elementor-row {
							@include row-cols($i);
						}
					}
				}
			}
		}
	}
}

$elementor-col-widths: (
	20: (
		md: 4,
		lg: 20,
	),
	25: (
		md: 6,
		lg: 3,
	),
	33: (
		md: 4,
		lg: 4,
	),
	40: (
		md: 6,
		lg: 40,
	),
	50: (
		md: 6,
		lg: 6,
	),
	60: (
		md: 60,
		lg: 60,
	),
	67: (
		md: 8,
		lg: 8,
	),
	75: (
		md: 9,
		lg: 9,
	),
	80: (
		md: 80,
		lg: 80,
	),
	100: (
		md: 12,
		lg: 12,
	),
);

@each $size, $name-map in $elementor-col-widths {
	.elementor-column.elementor-col-#{$size},
	.elementor-column[data-col='#{$size}'] {
		width: 100%;
		max-width: 100%;
	}
}

.elementor-row {
	width: 100%;
	display: flex;
	justify-content: var(--justify-content);
	flex-direction: var(--flex-direction);
	align-items: var(--align-items);
	align-content: var(--align-content);
	flex-wrap: var(--flex-wrap); // stylelint-disable-line
	gap: var(--gap-y) var(--gap-x);
}

.elementor-column {
	@include make-elementor-col-ready;
	@include make-elementor-columns;

	flex-direction: column;

	.elementor-column-wrap {
		display: flex;
		flex-direction: column;
		flex: 1 1 auto;
		height: 100%;
		min-height: 1px;
	}

	.elementor-widget-wrap {
		flex: 1 1 auto;
		height: 100%;
		min-height: 1px;
	}

	.elementor-widget-container {
		min-height: 1px;
	}

	&.full-height-content {
		> .elementor-column-wrap {
			> .elementor-widget-wrap {
				flex-direction: column;
			}
		}
	}

	&.stretched-col {
		&.left {
			&:not(.in-grid-content) {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content(left, false);
				}
			}

			&.in-grid-content {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content(left, true);
				}
			}
		}

		&.right {
			&:not(.in-grid-content) {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content(right, false);
				}
			}

			&.in-grid-content {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content(right, true);
				}
			}
		}
	}

	&.stretched-col-mobile {
		&:not(.left-mobile):not(.right-mobile) {
			&:not(.in-grid-content) {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content-mobile(both, false);
				}
			}

			&.in-grid-content {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content-mobile(both, true);
				}
			}
		}

		&.left-mobile {
			&:not(.in-grid-content) {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content-mobile(left, false);
				}
			}

			&.in-grid-content {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content-mobile(left, true);
				}
			}
		}

		&.right-mobile {
			&:not(.in-grid-content) {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content-mobile(right, false);
				}
			}

			&.in-grid-content {
				> .elementor-column-wrap {
					position: relative;
					@include stretch-col-content-mobile(right, true);
				}
			}
		}
	}
}

[class*='elementor-column-gap'] > .elementor-row > .elementor-column > .elementor-element-populated > .elementor-widget-wrap {
	padding: 0;
}

.elementor-edit-area-active .elementor-column-wrap.elementor-element-empty {
	padding: 10px;
	@include media-breakpoint-up(md) {
		.elementor-widget-wrap {
			margin: 0;
		}
	}
}
