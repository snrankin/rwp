@mixin make-container($x-spacing: null, $y-spacing: null, $important: false) {
	@if $x-spacing != null {
		--#{$variable-prefix}gutter-x: #{$x-spacing};
	}

	@if $y-spacing != null {
		--#{$variable-prefix}gutter-y: #{$y-spacing};
	}

	width: 100%;
	margin-right: auto;
	margin-left: auto;

	&:not(:first-child) {
		margin-top: getcssvar(container-gutter-y);
	}
	@if $important {
		width: 100% !important;
		margin-right: auto !important;
		margin-left: auto !important;
	}
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-widths($important: false, $max-widths: $container-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			@if $important {
				max-width: getcssvar(container-#{$breakpoint}-width) !important;
			} @else {
				max-width: getcssvar(container-#{$breakpoint}-width);
			}
		}
	}
}

// Grid system
// Generate semantic grid columns with these mixins.

@mixin row-gutters($x-spacing: null, $y-spacing: null, $important: false) {
	@if $x-spacing != null {
		--#{$variable-prefix}gutter-x: #{$x-spacing};
	}

	@if $y-spacing != null {
		--#{$variable-prefix}gutter-y: #{$y-spacing};
	}

	row-gap: getcssvar(gutter-y);
	margin-right: calc(#{getcssvar(gutter-x)} * -0.5);
	margin-left: calc(#{getcssvar(gutter-x)} * -0.5);
	width: calc(100% + #{getcssvar(gutter-x)});

	@if $important {
		row-gap: getcssvar(gutter-y) !important;
		margin-right: calc(#{getcssvar(gutter-x)} * -0.5) !important;
		margin-left: calc(#{getcssvar(gutter-x)} * -0.5) !important;
		width: calc(100% + #{getcssvar(gutter-x)}) !important;
	}
}

@mixin make-row($x-spacing: null, $y-spacing: null, $important: false) {
	@include row-gutters($x-spacing, $y-spacing, $important);

	display: flex;
	flex-wrap: wrap;
	float: none;
	min-width: 100%;

	&::before,
	&::after {
		display: none;
	}
}

@mixin col-gutters($important: false) {
	padding-right: calc(#{getcssvar(gutter-x)} * 0.5);
	padding-left: calc(#{getcssvar(gutter-x)} * 0.5);
	margin-top: getcssvar(gutter-y);
	@if $important {
		padding-right: calc(#{getcssvar(gutter-x)} * 0.5) !important;
		padding-left: calc(#{getcssvar(gutter-x)} * 0.5) !important;
		margin-top: getcssvar(gutter-y) !important;
	}
}

@mixin make-col-ready($important: false) {
	@include col-gutters($important);
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we set the width
	// later on to override this initial width.

	max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
	display: flex;
	flex: 0 1 auto;
	flex-direction: column;
}

@mixin make-col($size: false, $columns: $grid-columns) {
	@if $size {
		width: percentage(divide($size, $columns));
	} @else {
		max-width: 100%;
	}
}

@mixin make-col-auto() {
	width: auto;
}

@mixin make-col-offset($size, $side: left, $negative: false, $columns: $grid-columns) {
	$num: divide($size, $columns);

	@if $num > 0 {
		@if $negative == true {
			$num: #{calc(#{getcssvar(column-#{$size}-width)} * -1)};
		} @else {
			$num: getcssvar(column-#{$size}-width);
		}
	}

	@if $side == right {
		margin-right: if($num == 0, 0, $num);
	} @else {
		margin-left: if($num == 0, 0, $num);
	}
}

// Row columns
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
	> * {
		flex: 0 1 auto;
		width: divide(100%, $count);
	}
}

// Framework grid generation
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($selector: '.col', $selector-prefix: false, $selector-suffix: false, $breakpoints: $grid-breakpoints, $columns: $grid-columns) {
	@if $selector-prefix != false {
		$selector: #{$selector-prefix}#{$selector};
	}

	@if $selector-suffix != false {
		$selector: #{$selector}#{$selector-suffix};
	}

	@each $breakpoint, $value in $breakpoints {
		$class: '';
		$infix: breakpoint-infix($breakpoint);

		@if type-of($value) == string {
			@if $value != '' {
				$class: '-#{$value}';
			}
		} @else {
			$class: $infix;
		}

		@include media-breakpoint-up($breakpoint) {
			// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			// .col#{$infix} {
			// 	flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
			// }

			@if $selector-prefix == false and $selector-suffix == false {
				.row-cols#{$class}-auto > * {
					@include make-col-auto;
				}
				@if $grid-row-columns > 0 {
					@for $i from 1 through $grid-row-columns {
						.row-cols#{$class}-#{$i} {
							@include row-cols($i);
						}
					}
				}
			}

			#{$selector}#{$class}-auto {
				@include make-col-auto;
			}

			@if $columns > 0 {
				@for $i from 1 through $columns {
					#{$selector}#{$class}-#{$i} {
						@include make-col($i, $columns);
					}
				}

				// `$columns - 1` because offsetting by the width of an entire row isn't possible
				@for $i from 0 through ($columns - 1) {
					@if not($i == 0) {
						// Avoid emitting useless .offset-0

						@if $selector-prefix == false and $selector-suffix == false {
							.offset#{$class}-#{$i},
							.offset-l#{$class}-#{$i} {
								@include make-col-offset($i, left, false, $columns);
							}
							.offset-r#{$class}-#{$i} {
								@include make-col-offset($i, right, false, $columns);
							}
							.offset-nl#{$class}-#{$i} {
								@include make-col-offset($i, left, true, $columns);
							}
							.offset-nr#{$class}-#{$i} {
								@include make-col-offset($i, right, true, $columns);
							}
						} @else {
							#{$selector}.offset#{$class}-#{$i},
							#{$selector}.offset-l#{$class}-#{$i} {
								@include make-col-offset($i, left, false, $columns);
							}
							#{$selector}.offset-r#{$class}-#{$i} {
								@include make-col-offset($i, right, false, $columns);
							}
							#{$selector}.offset-nl#{$class}-#{$i} {
								@include make-col-offset($i, left, true, $columns);
							}
							#{$selector}.offset-nr#{$class}-#{$i} {
								@include make-col-offset($i, right, true, $columns);
							}
						}
					}
				}
			}

			// Gutters
			// Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
			@each $key, $value in $gutters {
				@if $selector-prefix == false and $selector-suffix == false {
					.g#{$class}-#{$key},
					.gx#{$class}-#{$key} {
						--#{$variable-prefix}gutter-x: #{$value};
					}

					.g#{$class}-#{$key},
					.gy#{$class}-#{$key} {
						--#{$variable-prefix}gutter-y: #{$value};
					}
				} @else {
					#{$selector}.g#{$class}-#{$key},
					#{$selector}.gx#{$class}-#{$key} {
						--#{$variable-prefix}gutter-x: #{$value};
					}

					#{$selector}.g#{$class}-#{$key},
					#{$selector}.gy#{$class}-#{$key} {
						--#{$variable-prefix}gutter-y: #{$value};
					}
				}
			}
		}
	}
}

@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);

		@include media-breakpoint-up($breakpoint, $breakpoints) {
			@if $columns > 0 {
				@for $i from 1 through $columns {
					.g-col#{$infix}-#{$i} {
						grid-column: auto / span $i;
					}
				}

				// Start with `1` because `0` is and invalid value.
				// Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
				@for $i from 1 through ($columns - 1) {
					.g-start#{$infix}-#{$i} {
						grid-column-start: $i;
					}
				}
			}
		}
	}
}

@mixin make-percent-columns($columns, $name) {
	$columns: $columns - 1;
	@for $i from 1 through $columns {
		[class*='#{$name}-'] {
			@include make-col-ready;
		}
		@each $breakpoint in map-keys($grid-breakpoints) {
			$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
			$size: percentage(divide($i, $columns));
			$size: strip-units($size);
			.#{$name}-#{$infix}-#{$size} {
				@include make-col($i, $columns);
			}
		}
	}
}

@function page-gutter($breakpoint: '', $container: false) {
	$container-width: getcssvar(container-width);
	@if $breakpoint != '' {
		$container-width: getcssvar(container-#{$breakpoint}-width);
	}

	$container-gutter: getcssvar(gutter-x);
	$page-gutter: '';
	@if $container == true {
		$page-gutter: calc(((100vw - #{$container-width}) * 0.5) + (#{$container-gutter} * 0.5));
	} @else {
		$page-gutter: calc((100vw - #{$container-width}) * 0.5);
	}

	@return $page-gutter;
}

@function stretched-col-content($breakpoint, $container: false) {
	$gutter: remove-calc(page-gutter($breakpoint, $container));

	@return calc(#{$gutter} + 100%);
}

@mixin stretch-col-content(
	$side: left,
	$content-in-grid: true,
	$container: false,
	$breakpoints: (
		md,
		lg,
		xl,
		xxl,
	)
) {
	@if is-map($breakpoints) and map-has-key($breakpoints, 'md') == true {
		$breakpoints: map-keys($breakpoints);
	}
	@each $breakpoint in $breakpoints {
		@include media-breakpoint-up($breakpoint) {
			$infix: breakpoint-infix($breakpoint);

			--width: #{stretched-col-content($breakpoint, $container)};

			width: stretched-col-content($breakpoint, $container);

			$gutter: page-gutter($breakpoint, $container);
			$margin-gutter: calc(#{remove-calc($gutter)} * -1) !important;
			$padding-gutter: #{$gutter} !important;
			@if $side == left {
				margin-left: $margin-gutter;
				@if $content-in-grid == true {
					padding-left: $padding-gutter;
				}
			} @else if $side == right {
				margin-right: $margin-gutter;
				@if $content-in-grid == true {
					padding-right: $padding-gutter;
				}
			}
		}
	}
}

@mixin stretch-col-content-mobile(
	$side: left,
	$content-in-grid: true,
	$container: false,
	$breakpoints: (
		sm,
	)
) {
	@each $breakpoint in $breakpoints {
		@include media-breakpoint-down($breakpoint) {
			$gutter: page-gutter($breakpoint, $container);
			$margin-gutter: calc(#{remove-calc($gutter)} * -1) !important;
			$padding-gutter: #{$gutter} !important;
			@if $side == left {
				width: stretched-col-content($breakpoint);
				margin-left: $margin-gutter;
				@if $content-in-grid == true {
					padding-left: $padding-gutter;
				}
			} @else if $side == right {
				width: stretched-col-content($breakpoint);
				margin-right: $margin-gutter;
				@if $content-in-grid == true {
					padding-right: $padding-gutter;
				}
			} @else {
				width: calc((#{$gutter}* 2) + 100%);
				margin-right: $margin-gutter;
				margin-left: $margin-gutter;
				@if $content-in-grid == true {
					padding-right: $padding-gutter;
					padding-left: $padding-gutter;
				}
			}
		}
	}
}

@mixin make-section($section-selector: '.section-wrapper', $bg-selector: false) {
	width: 100%;

	@if $bg-selector != false {
		&#{$bg-selector} {
			position: relative;

			+ #{$section-selector}:not(#{$bg-selector}) {
				margin-top: getcssvar(section-spacing);
			}
		}

		&:not(#{$bg-selector}) {
			+ #{$section-selector} {
				margin-top: getcssvar(section-spacing);
			}
		}

		&:not(#{$bg-selector}):not(:first-child) {
			margin-top: getcssvar(section-spacing);
		}
	} @else {
		&:not(:first-child) {
			margin-top: getcssvar(section-spacing);
		}
	}

	@media only screen {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}
}

@mixin make-section-inner($bg-selector: false) {
	width: 100%;

	@if $bg-selector != false {
		#{$bg-selector} & {
			position: relative;
			z-index: 5;
			padding-top: getcssvar(section-spacing);
			padding-bottom: getcssvar(section-spacing);
		}
	}

	@supports (padding: unquote('max(0px)')) {
		// stylelint-disable-next-line
		@media only screen and (min-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {
			padding-left: unquote('max(#{getcssvar(gutter-x)}, env(safe-area-inset-left))');
			padding-right: unquote('max(#{getcssvar(gutter-x)}, env(safe-area-inset-right))');
		}
	}
}
